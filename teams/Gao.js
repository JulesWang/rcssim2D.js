// Generated by CoffeeScript 1.6.3
var Gao;

Gao = (function() {
  function Gao(num, side) {
    this.teamname = 'Gao';
    this.fill_color = '#32CD32';
    this.teamnum = num;
    this.side = side;
    this.fmt = new Fmt523();
    this.eps = Math.PI / 6;
  }

  Gao.prototype.getfmtpos = function(bp) {
    var pos;
    pos = this.fmt.p[this.teamnum];
    if (this.teamnum !== 0) {
      pos.x = (PITCH_HALF_LENGTH + bp[0]) * pos.ratio - PITCH_HALF_LENGTH;
    }
    return [pos.x, pos.y];
  };

  Gao.prototype.think = function(wm) {
    this.wm = wm;
    if (this.side === 'left') {
      this.teammates = this.wm.leftplayers;
      this.opteam = this.wm.rightplayers;
    } else {
      this.teammates = this.wm.rightplayers;
      this.opteam = this.wm.leftplayers;
    }
    this.mypos = this.teammates[this.teamnum];
    this.mydir = this.wm.mydir;
    switch (this.wm.gamestate) {
      case 'before_kickoff':
        return {
          jump: this.getfmtpos(this.wm.ball, this.teamnum)
        };
      case 'game_over':
        return {};
      case 'play_on':
        return this.playon();
      case 'goalkick_left':
        if (this.side === 'left') {
          return this.goalkick();
        } else {
          return this.playon();
        }
        break;
      case 'goalkick_right':
        if (this.side === 'right') {
          return this.goalkick();
        } else {
          return this.playon();
        }
        break;
      default:
        return this.playon();
    }
  };

  Gao.prototype.playon = function() {
    if (is_goalie(this.teamnum)) {
      return this.goalie();
    }
    return this.play();
  };

  Gao.prototype.goalkick = function() {
    return this.play();
  };

  Gao.prototype.goalie = function() {
    var ret;
    if (Vector2d.distance(this.mypos, this.wm.ball) < HALF_GOAL_WIDTH && in_my_penalty(this.wm.ball)) {
      ret = this.goto(this.wm.ball);
      ret.suck = 0;
      return ret;
    } else {
      return this.goto(this.getfmtpos(this.wm.ball, this.teamnum));
    }
  };

  Gao.prototype.play = function() {
    if (player_near_ball(this.teammates, this.wm.ball) === this.teamnum) {
      return this.go_and_kick(this.wm.ball);
    } else {
      return this.goto(this.getfmtpos(this.wm.ball, this.teamnum));
    }
  };

  Gao.prototype.goto = function(pos) {
    var angle, delta, me2pos;
    if (Vector2d.distance(pos, this.mypos) < 0.1) {
      return {};
    }
    me2pos = Vector2d.subtract(pos, this.mypos);
    angle = Math.atan2(me2pos[1], me2pos[0]);
    delta = Math.normaliseRadians(angle - this.mydir);
    if (Math.abs(delta) < this.eps) {
      return {
        dash: MAX_DASH_FORCE
      };
    } else {
      return {
        turn: delta
      };
    }
  };

  Gao.prototype.dis_op2b_opplayer_near_ball = function(ball) {
    var dis, opnum, opplayer;
    opnum = player_near_ball(this.opteam, ball);
    opplayer = this.opteam[opnum];
    return dis = Vector2d.distance(ball, opplayer);
  };

  Gao.prototype.go_and_kick = function(ball) {
    var angleb2g, anglem2b, ball2goal, delta1, delta2, dis, disb2g, disop, goal2ball, gopos, me2ball, unit;
    goal2ball = Vector2d.subtract(ball, OP_GOAL_POS);
    unit = Vector2d.unit(goal2ball);
    gopos = Vector2d.add(Vector2d.multiply(unit, BALL_R + PLAYER_R + 2), ball);
    ball2goal = Vector2d.subtract(OP_GOAL_POS, ball);
    angleb2g = Math.atan2(ball2goal[1], ball2goal[0]);
    me2ball = Vector2d.subtract(ball, this.mypos);
    anglem2b = Math.atan2(me2ball[1], me2ball[0]);
    delta1 = Math.normaliseRadians(angleb2g - anglem2b);
    dis = Vector2d.distance(ball, this.mypos);
    disb2g = Vector2d.distance(ball, OP_GOAL_POS);
    disop = this.dis_op2b_opplayer_near_ball(ball);
    if (Math.abs(delta1) < this.eps && dis < BALL_R + PLAYER_R + 3) {
      delta2 = Math.normaliseRadians(anglem2b - this.mydir);
      if (Math.abs(delta2) < this.eps) {
        if (this.teamnum === 0) {
          if (dis < BALL_R + PLAYER_R) {
            return {
              kick: MAX_KICK_FORCE
            };
          }
          return {
            suck: 1
          };
        }
        if (disb2g < PENALTY_AREA_LENGTH - PLAYER_R) {
          return {
            kick: MAX_KICK_FORCE
          };
        }
        if (disop > dis && dis > PITCH_HALF_LENGTH / 4) {
          return this.goto(gopos);
        }
        if (Math.abs(disop - dis) > BALL_R && disop < BALL_R + PLAYER_R + 3) {
          return {
            kick: MAX_KICK_FORCE
          };
        }
        return {
          kick: MAX_KICK_FORCE / 2
        };
      } else {
        return {
          turn: delta2
        };
      }
    } else {
      return this.goto(gopos);
    }
  };

  return Gao;

})();
